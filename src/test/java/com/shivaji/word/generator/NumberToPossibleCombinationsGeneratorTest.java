package com.shivaji.word.generator;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Collection;
import org.junit.jupiter.api.Test;

/** @author Shivaji */
class NumberToPossibleCombinationsGeneratorTest {
  NumberToPossibleCombinationsGenerator objectUnderTest =
      new NumberToPossibleCombinationsGenerator();

  @Test
  void go_12() {
    Collection<String> results = objectUnderTest.process("12");
    assertEquals(4, results.size());
    assertEquals("[(1)2, 12, 1()2, 1(2)]", results.toString());
  }

  @Test
  void go_123() {
    Collection<String> results = objectUnderTest.process("123");
    assertEquals(10, results.size());
    assertEquals(
        "[1(2)3, 123, 1()2(3), (1)2(3), 12(3), 1()23, 12()3, (1)23, 1()2()3, (1)2()3]",
        results.toString());
  }

  @Test
  void go_12345() {
    Collection<String> results = objectUnderTest.process("12345");
    assertEquals(58, results.size());
    assertEquals(
        "[1(2)345, 12()3()4(5), (1)2()3()4(5), 1(2)3(4)5, (1)2(3)45, 1()2()3(4)5, 1(2)3()4(5), 1()2(3)4(5), 1()2()345, 1()2(3)4()5, 1()2()3()45, 1(2)34()5, 1234()5, (1)23()45, 12()3()4()5, 12(3)4(5), 12()3(4)5, (1)2345, 1()23()45, 123(4)5, 1()23(4)5, 123()45, 12(3)4()5, 1()234()5, 12()3()45, 123()4(5), 1()2(3)45, (1)2()34(5), 1()23()4()5, 1(2)3()45, (1)2(3)4(5), (1)234()5, 12(3)45, 1()2()3()4(5), (1)2()34()5, (1)2()3(4)5, 1()23()4(5), (1)23()4()5, 1()2345, 12()34()5, 1()234(5), 1()2()34(5), 123()4()5, 1(2)3()4()5, (1)2()345, (1)23(4)5, (1)234(5), (1)2()3()4()5, (1)2()3()45, 1234(5), 1(2)34(5), 12()34(5), 1()2()34()5, 12()345, 12345, (1)2(3)4()5, 1()2()3()4()5, (1)23()4(5)]",
        results.toString());
  }

  @Test
  void go_225563() {
    Collection<String> results = objectUnderTest.process("225563");
    assertEquals(140, results.size());
    assertEquals(
        "[22()5()563, (2)2()5(5)63, (2)25(5)6()3, 225(5)63, (2)2()556(3), 2(2)556(3), 2()25()5(6)3, 2()2()556()3, 225()56(3), 22(5)5()6()3, 22556(3), 22()55()6()3, 2()2()5()56()3, 2(2)5()5()6()3, (2)25()5()6()3, 22()5()5()6()3, 22()5()56(3), (2)2()55()63, (2)2()5(5)6()3, 2(2)55()63, 2()2556()3, 22()5()5(6)3, (2)25()5()6(3), 2255()6()3, 2()255()6()3, (2)2()5563, (2)2()55()6(3), (2)255()6(3), 2(2)5(5)6()3, 2(2)5()5()6(3), 2(2)5(5)63, 2()2()55()63, 2()2()5(5)6(3), 225()5(6)3, 2(2)55()6(3), (2)2556()3, 2()2()5()5()6()3, 2255()63, 22()5()5()6(3), 2()2556(3), (2)255()6()3, 22()5()56()3, 2(2)5(5)6(3), 2()2(5)563, 22()556()3, (2)2()55(6)3, 225()5()6()3, 2()2()5()563, (2)25(5)63, (2)2()5(5)6(3), 2()2(5)5(6)3, (2)2(5)5()6()3, 2()25()563, 225()56()3, 2()2()556(3), 22()55()6(3), 22556()3, 22()5(5)63, 22()5()5()63, (2)25563, 2()2()5()5()6(3), 2(2)5563, 2(2)5()5(6)3, (2)2(5)5()6(3), 2(2)556()3, 2255()6(3), (2)2()5()5(6)3, 2()2()55(6)3, 2()25563, 225()5()63, 2()2(5)56(3), 22(5)563, 2()2(5)5()6(3), 2(2)5()56()3, (2)255(6)3, 2()255(6)3, 2()2(5)5()63, 22()556(3), 22()5563, (2)2()5()56()3, (2)25()56()3, 225()5()6(3), 225()563, 225(5)6()3, 2()25()56()3, 22(5)56()3, 2()25()5()6()3, 22()5(5)6(3), 2()2()55()6()3, 2(2)5()5()63, (2)2()5()563, (2)2()5()56(3), (2)25()56(3), (2)2()5()5()63, (2)25()5()63, 22()5(5)6()3, 22()55()63, 2(2)5()563, 2()2()5()5(6)3, 22(5)5()63, 225(5)6(3), 225563, 2(2)5()56(3), 2()25(5)6(3), (2)2(5)5(6)3, (2)2()55()6()3, 2()25()5()6(3), 2()255()63, 2()25()5()63, 2()25()56(3), 22(5)56(3), (2)2556(3), 2(2)55()6()3, 2()25(5)63, 2()2()5()56(3), 2()25(5)6()3, 2()2()5563, 2()2(5)5()6()3, (2)25(5)6(3), (2)2(5)56(3), 2(2)55(6)3, 2()2(5)56()3, 2()2()5(5)6()3, 22(5)5()6(3), (2)255()63, (2)2()5()5()6(3), 2()2()5(5)63, (2)2()556()3, (2)2(5)56()3, 22()55(6)3, (2)2(5)5()63, (2)2()5()5()6()3, 22(5)5(6)3, (2)25()5(6)3, 2()2()55()6(3), (2)2(5)563, (2)25()563, 2255(6)3, 2()2()5()5()63, 2()255()6(3)]",
        results.toString());
  }

  @Test
  void go_2255763() {
    Collection<String> results = objectUnderTest.process("2255763");
    assertEquals(338, results.size());
    assertEquals(
        "[22(5)5(7)6()3, 22()55(7)6(3), 22557(6)3, 2(2)5(5)7()6(3), 2()2(5)5()763, (2)255()7()6(3), (2)2()55()7()6(3), 22()5(5)76()3, 2(2)5()57(6)3, 2255()763, 225()5763, 2()2()5()5()76(3), 2()25(5)7(6)3, 22(5)5()763, 2()255()76(3), 2(2)5()5()7()63, (2)255()7()63, 2()2()5(5)7()6()3, 2(2)5()5()7()6(3), 2()2(5)57(6)3, 2()2(5)5(7)6()3, 2()25(5)7()6()3, 2(2)5()5()763, 225()57()6(3), 2255()76(3), 22()5()57(6)3, (2)25()5()7(6)3, 2()2()5(5)76()3, 225(5)7()6()3, (2)2()5(5)763, 2(2)55(7)6(3), 2(2)5576()3, 225(5)7(6)3, 2()2()5576(3), (2)2()5()5()763, 22()5()5(7)6()3, 2(2)5(5)7()63, (2)2()557()63, (2)2()55()76()3, (2)255()76()3, 2()255()763, 2(2)557()6()3, 2(2)5()5(7)6()3, 2()25()57()6(3), 22()55()7()6()3, (2)2()5()57()6(3), 2()255()7(6)3, (2)25()57()6(3), 2()25()5763, 2()2557()6(3), 2()25()5()7(6)3, (2)2(5)5(7)6()3, 22()55()76()3, 2255()7()6(3), (2)2(5)57()63, (2)2(5)5()7()6(3), 225()5()7(6)3, 2()25(5)76(3), 2()2557(6)3, (2)2()55()7()63, 2(2)5(5)76()3, (2)25()5(7)63, (2)25576()3, (2)2()5()5()7(6)3, (2)2()557()6()3, 2(2)55()76()3, 22(5)576(3), 2()2()55(7)6(3), (2)2()5()5()7()6(3), (2)2()5(5)7()63, 2()25()5()76(3), 22()5()5()763, 2()2()5()5()7()6()3, 22(5)57(6)3, (2)2()5()5()76(3), (2)2()55(7)63, 2()2()5()5()763, (2)2()5(5)76()3, 2()2()55()76()3, 2(2)55()7()63, 225()5()76(3), (2)255(7)6()3, 22()5()5763, (2)2(5)576()3, 2(2)557(6)3, 22()5()57()6()3, 22(5)5()76()3, 2255(7)6()3, 2()2()5(5)7(6)3, 225()57()63, 2(2)5()5763, 2(2)55()763, (2)2()5(5)7()6()3, 22()5(5)7()6()3, (2)25()57(6)3, 2()2()55()76(3), 22(5)57()6()3, 22()557()6(3), 22()5(5)7(6)3, 2()2557()63, 2(2)5(5)763, 22()5()5()7()63, 2()2(5)5()76()3, 225()5(7)63, 22()5(5)763, (2)25()576(3), 2()255(7)63, 2()2()55()763, 2()2(5)576()3, 2()255(7)6(3), 22(5)5()7()63, 2()2()5(5)763, 2(2)557()6(3), 22()55()763, 2()2(5)57()6()3, 2()25()5()763, 2()2()5()5(7)6()3, 2(2)55()7(6)3, (2)2557()63, 2()25()576(3), (2)2()5()576(3), 22()55()76(3), 2(2)5()576(3), 2()2(5)5()7()63, 2()2()5()57(6)3, 2()25()57(6)3, 2(2)5(5)7(6)3, (2)25()5()7()6()3, (2)2(5)57()6()3, 2()2(5)5(7)6(3), 2()2()55()7(6)3, 225576(3), 2()2()557()6(3), 22()557()63, 22(5)5()7()6(3), 2()2(5)5()7()6(3), (2)2()55(7)6(3), 225(5)76()3, 2()2()5(5)76(3), (2)25()5()76(3), 22(5)5(7)6(3), 22()55()7(6)3, 2()2(5)57()63, (2)2()5()57(6)3, (2)2()55763, (2)2(5)5()76()3, (2)25(5)76(3), 2(2)55()7()6(3), 2(2)5()5()7(6)3, 2(2)5576(3), 2()2(5)5(7)63, 2()25576()3, 2()2()557(6)3, 225()5(7)6()3, (2)255(7)63, 22()5()576(3), 225()5()7()6()3, (2)2(5)5()763, (2)255()7(6)3, 2()25()5()7()6()3, 22()5576()3, 2()2()5()5763, 2(2)5()5()76(3), 22()5(5)76(3), 225()576()3, 225(5)7()63, 2()2()5()576(3), (2)2()5()5(7)6()3, (2)2(5)5()7()63, 2()25()5(7)6()3, 2()2()5()57()6()3, 2()2()5()57()63, 2()2(5)5763, (2)2()5()5()7()6()3, 2(2)5(5)76(3), 2()2(5)5()7(6)3, (2)2()5576(3), 2()2()55(7)63, 2()2(5)5()7()6()3, (2)2557()6(3), 2255()76()3, 225()5()7()63, 2()255()7()63, 225(5)7()6(3), 2(2)5()57()6(3), (2)255()76(3), 2()25()5()7()63, 2255763, 22()55(7)63, 22()5()5()7()6(3), 2()2557()6()3, 2()25()57()6()3, 2()2()5576()3, (2)2(5)57(6)3, 2()2()5()5()7()63, 22(5)57()63, (2)255763, 2255()7()63, 2(2)5()5()7()6()3, 22()55()7()6(3), (2)2()5(5)76(3), (2)2()5(5)7(6)3, (2)255()7()6()3, 2()25(5)7()6(3), 22557()6()3, (2)25(5)7(6)3, (2)2(5)5(7)6(3), 2(2)5(5)7()6()3, 2()2()5()576()3, 2()2()55(7)6()3, 2()25()5()76()3, 225()5()7()6(3), (2)2()55()763, 2()255()76()3, (2)25()5(7)6()3, 2()2()557()63, 225()5()763, (2)2()557(6)3, (2)2(5)5763, 2()2(5)5()76(3), 22(5)57()6(3), 22(5)5763, 2()255()7()6()3, (2)2()557()6(3), 2()25(5)7()63, (2)2()5()5763, 2()2()55()7()6()3, (2)25(5)7()6(3), 2(2)55()76(3), 2()25(5)763, 225()5()76()3, (2)2()55()7()6()3, 22()55(7)6()3, 225()57(6)3, 2255(7)6(3), 22(5)5()76(3), (2)2()5()5()7()63, (2)2()55()7(6)3, (2)2(5)5()7()6()3, 2()2(5)57()6(3), 2()25(5)76()3, 22(5)5()7(6)3, 2()2()5()5()76()3, (2)2()5()57()6()3, 2()25()576()3, (2)2()55()76(3), 2()2()5()5(7)6(3), 22()5()5(7)6(3), 22(5)5(7)63, 225(5)763, 225()57()6()3, (2)2(5)576(3), 2()2()55763, 22()5()5()76()3, 2255()7()6()3, 2()25()57()63, (2)2557(6)3, (2)255()763, (2)25(5)76()3, 22()55()7()63, (2)25()5763, 22(5)5()7()6()3, 22()5()5()76(3), (2)2()5()576()3, (2)25(5)7()6()3, (2)255(7)6(3), 2()255()7()6(3), 2()2()55()7()63, 22()557(6)3, 2255(7)63, 2()2()557()6()3, (2)2(5)5(7)63, (2)2()5()5(7)63, 225576()3, (2)25()57()6()3, 2()25()5(7)6(3), 2()2()55()7()6(3), (2)2()5()57()63, (2)25()57()63, 225()576(3), 2()25576(3), (2)25576(3), 2(2)5()5(7)6(3), (2)2(5)57()6(3), (2)2(5)5()7(6)3, (2)25()5()763, (2)25(5)763, 2(2)5()576()3, 22()557()6()3, 22()5()5(7)63, 2()25()5()7()6(3), 2(2)55763, 22(5)576()3, 225()5(7)6(3), 2()2()5()5()7()6(3), 22()55763, (2)2()5()5()76()3, 22()5()576()3, 22()5576(3), 2(2)5()57()63, 2()2()5()5()7(6)3, 2(2)5()5()76()3, 22()5()5()7(6)3, 2()2()5(5)7()63, (2)25()5(7)6(3), (2)2()5(5)7()6(3), 2(2)557()63, (2)25()576()3, 22()5(5)7()63, (2)2()5()5(7)6(3), 2()25()5(7)63, 22()5()57()6(3), 2()2()5()57()6(3), 2(2)55(7)6()3, 2()255763, 22557()63, (2)25()5()7()63, 2()2()5()5(7)63, (2)2()5576()3, 22()5(5)7()6(3), (2)2557()6()3, 2()2()5(5)7()6(3), (2)25(5)7()63, (2)25()5()7()6(3), 225(5)76(3), 2(2)55()7()6()3, (2)2(5)5()76(3), 2(2)5()57()6()3, 2(2)55(7)63, 2()2(5)576(3), 2(2)5()5(7)63, 22()5()5()7()6()3, 2255()7(6)3, 22()5()57()63, (2)2()55(7)6()3, 2()255(7)6()3, 22557()6(3), (2)25()5()76()3]",
        results.toString());
  }
}
